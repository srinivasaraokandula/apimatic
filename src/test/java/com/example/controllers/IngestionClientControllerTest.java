/*
 * OsduR1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.example.models.*;
import com.example.exceptions.*;
import com.example.APIHelper;
import com.example.Configuration;
import com.example.testing.TestHelper;
import com.example.controllers.IngestionClientController;

import com.fasterxml.jackson.core.type.TypeReference;

public class IngestionClientControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static IngestionClientController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getIngestionClient();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * getiIngestionWorkflows
     * @throws Throwable
     */
    @Test
    public void testTestGetiIngestionWorkflows() throws Throwable {
        // Parameters for the API call
        Body6 body = null;

        // Set callback and perform API call
        List<ParentWorkflow> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createGetiIngestionWorkflows(body);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

    }

    /**
     * reset
     * @throws Throwable
     */
    @Test
    public void testTestReset() throws Throwable {

        // Set callback and perform API call
        GenericResetResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createReset();
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

    }

    /**
     * Fetches all the available pipelines in the Cosmos DB collection
     * @throws Throwable
     */
    @Test
    public void testTestViewIngestionPipeline() throws Throwable {
        // Parameters for the API call
        Body7 body = null;

        // Set callback and perform API call
        List<Pipeline> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createViewIngestionPipeline(body);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"id\":\"ASEV34234SD-SDSDASE5464N\",\"pipelineName\":\"Gulf_Of_Mexico\",\"description\":\"Gulf of mexico documents\",\"createdBy\":\"use897@wipro.com\",\"manifestFolderPath\":\"https://r1devosdudemodata.blob.core.windows.net/master/wellbore3/\"},{\"id\":\"ASDDFDL3DD-JGJGHG4343GHL\",\"pipelineName\":\"UK_Well_Docuents\",\"description\":\"UK well documents\",\"createdBy\":\"use897@wipro.com\",\"manifestFolderPath\":\"https://r1devosdudemodata.blob.core.windows.net/master/well/\"}]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Get the status of Parentworkflow document(s) associated with the given pipeline ID
     * @throws Throwable
     */
    @Test
    public void testTestGetPipelineWorkflowStatus() throws Throwable {
        // Parameters for the API call
        Body10 body = null;

        // Set callback and perform API call
        List<ParentWorkflow> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createGetPipelineWorkflowStatus(body);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

    }

}
