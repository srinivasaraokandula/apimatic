/*
 * OsduR1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.example.*;
import com.example.models.*;
import com.example.exceptions.*;
import com.example.http.client.HttpClient;
import com.example.http.client.HttpContext;
import com.example.http.request.HttpRequest;
import com.example.http.response.HttpResponse;
import com.example.http.response.HttpStringResponse;
import com.example.http.client.APICallBack;
import com.example.controllers.syncwrapper.APICallBackCatcher;

public class CollectionAPIController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static CollectionAPIController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the CollectionAPIController class 
     */
    public static CollectionAPIController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new CollectionAPIController();
                }
            }
        }
        return instance;
    }

    /**
     * createCollection
     * @param    body    Required parameter: { OwnerID, Name, Description, WorkSpaceID, Resources, FilterSpecification }
     * @return    Returns the InlineResponse200 response from the API call 
     */
    public InlineResponse200 createcollection(
                final CollectionCreate body
    ) throws Throwable {

        HttpRequest _request = _buildCreatecollectionRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreatecollectionResponse(_context);
    }

    /**
     * createCollection
     * @param    body    Required parameter: { OwnerID, Name, Description, WorkSpaceID, Resources, FilterSpecification }
     */
    public void createcollectionAsync(
                final CollectionCreate body,
                final APICallBack<InlineResponse200> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreatecollectionRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            InlineResponse200 returnValue = _handleCreatecollectionResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createcollection
     */
    private HttpRequest _buildCreatecollectionRequest(
                final CollectionCreate body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/createCollection");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createcollection
     * @return An object of type InlineResponse200
     */
    private InlineResponse200 _handleCreatecollectionResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        InlineResponse200 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<InlineResponse200>(){});

        return _result;
    }

    /**
     * updateCollection
     * @param    body    Required parameter: { SRN*, OwnerID, Name, Description, WorkSpaceID, Resources, FilterSpecification }
     * @return    Returns the InlineResponse200 response from the API call 
     */
    public InlineResponse200 updatecollection(
                final CollectionUpdate body
    ) throws Throwable {

        HttpRequest _request = _buildUpdatecollectionRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdatecollectionResponse(_context);
    }

    /**
     * updateCollection
     * @param    body    Required parameter: { SRN*, OwnerID, Name, Description, WorkSpaceID, Resources, FilterSpecification }
     */
    public void updatecollectionAsync(
                final CollectionUpdate body,
                final APICallBack<InlineResponse200> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdatecollectionRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            InlineResponse200 returnValue = _handleUpdatecollectionResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updatecollection
     */
    private HttpRequest _buildUpdatecollectionRequest(
                final CollectionUpdate body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/updateCollection");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updatecollection
     * @return An object of type InlineResponse200
     */
    private InlineResponse200 _handleUpdatecollectionResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        InlineResponse200 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<InlineResponse200>(){});

        return _result;
    }

    /**
     * getCollection
     * @param    body    Required parameter: { SRN* }
     * @return    Returns the MCollection response from the API call 
     */
    public MCollection createGetCollection(
                final Body body
    ) throws Throwable {

        HttpRequest _request = _buildCreateGetCollectionRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateGetCollectionResponse(_context);
    }

    /**
     * getCollection
     * @param    body    Required parameter: { SRN* }
     */
    public void createGetCollectionAsync(
                final Body body,
                final APICallBack<MCollection> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateGetCollectionRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            MCollection returnValue = _handleCreateGetCollectionResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createGetCollection
     */
    private HttpRequest _buildCreateGetCollectionRequest(
                final Body body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/getCollection");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createGetCollection
     * @return An object of type MCollection
     */
    private MCollection _handleCreateGetCollectionResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        MCollection _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<MCollection>(){});

        return _result;
    }

    /**
     * deleteCollection
     * @param    body    Required parameter: { SRN* }
     * @return    Returns the GenericResponse response from the API call 
     */
    public GenericResponse createDeleteCollection(
                final Body1 body
    ) throws Throwable {

        HttpRequest _request = _buildCreateDeleteCollectionRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateDeleteCollectionResponse(_context);
    }

    /**
     * deleteCollection
     * @param    body    Required parameter: { SRN* }
     */
    public void createDeleteCollectionAsync(
                final Body1 body,
                final APICallBack<GenericResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateDeleteCollectionRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GenericResponse returnValue = _handleCreateDeleteCollectionResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createDeleteCollection
     */
    private HttpRequest _buildCreateDeleteCollectionRequest(
                final Body1 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/deleteCollection");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createDeleteCollection
     * @return An object of type GenericResponse
     */
    private GenericResponse _handleCreateDeleteCollectionResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GenericResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GenericResponse>(){});

        return _result;
    }

    /**
     * listCollection
     * @param    body    Required parameter: { OwnerID* }
     * @return    Returns the List<MCollection> response from the API call 
     */
    public List<MCollection> createListCollection(
                final Body2 body
    ) throws Throwable {

        HttpRequest _request = _buildCreateListCollectionRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateListCollectionResponse(_context);
    }

    /**
     * listCollection
     * @param    body    Required parameter: { OwnerID* }
     */
    public void createListCollectionAsync(
                final Body2 body,
                final APICallBack<List<MCollection>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateListCollectionRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<MCollection> returnValue = _handleCreateListCollectionResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createListCollection
     */
    private HttpRequest _buildCreateListCollectionRequest(
                final Body2 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/listCollection");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createListCollection
     * @return An object of type List<MCollection>
     */
    private List<MCollection> _handleCreateListCollectionResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<MCollection> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<MCollection>>(){});

        return _result;
    }

}
