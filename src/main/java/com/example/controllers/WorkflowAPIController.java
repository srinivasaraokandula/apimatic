/*
 * OsduR1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.example.*;
import com.example.models.*;
import com.example.exceptions.*;
import com.example.http.client.HttpClient;
import com.example.http.client.HttpContext;
import com.example.http.request.HttpRequest;
import com.example.http.response.HttpResponse;
import com.example.http.response.HttpStringResponse;
import com.example.http.client.APICallBack;
import com.example.controllers.syncwrapper.APICallBackCatcher;

public class WorkflowAPIController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static WorkflowAPIController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the WorkflowAPIController class 
     */
    public static WorkflowAPIController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new WorkflowAPIController();
                }
            }
        }
        return instance;
    }

    /**
     * DescribeWorkflow
     * @param    body    Required parameter: { WorkflowJobID* } - ID of the workflow document
     * @return    Returns the DescribeWorkflowResponse response from the API call 
     */
    public DescribeWorkflowResponse createDescribeWorkflow(
                final DescribeWorkflowPayload body
    ) throws Throwable {

        HttpRequest _request = _buildCreateDescribeWorkflowRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateDescribeWorkflowResponse(_context);
    }

    /**
     * DescribeWorkflow
     * @param    body    Required parameter: { WorkflowJobID* } - ID of the workflow document
     */
    public void createDescribeWorkflowAsync(
                final DescribeWorkflowPayload body,
                final APICallBack<DescribeWorkflowResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateDescribeWorkflowRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DescribeWorkflowResponse returnValue = _handleCreateDescribeWorkflowResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createDescribeWorkflow
     */
    private HttpRequest _buildCreateDescribeWorkflowRequest(
                final DescribeWorkflowPayload body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/DescribeWorkflow");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createDescribeWorkflow
     * @return An object of type DescribeWorkflowResponse
     */
    private DescribeWorkflowResponse _handleCreateDescribeWorkflowResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new InlineResponse400Exception("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new InlineResponse400Exception("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        DescribeWorkflowResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DescribeWorkflowResponse>(){});

        return _result;
    }

    /**
     * StartSMDSLoadingWorkflow
     * @param    body    Required parameter: { ResourceTypeID* , Manifest* }
     * @return    Returns the GenericResponse200 response from the API call 
     */
    public GenericResponse200 createStartsmdsloadingworkflow(
                final SMDSWorkflowPayload body
    ) throws Throwable {

        HttpRequest _request = _buildCreateStartsmdsloadingworkflowRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateStartsmdsloadingworkflowResponse(_context);
    }

    /**
     * StartSMDSLoadingWorkflow
     * @param    body    Required parameter: { ResourceTypeID* , Manifest* }
     */
    public void createStartsmdsloadingworkflowAsync(
                final SMDSWorkflowPayload body,
                final APICallBack<GenericResponse200> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateStartsmdsloadingworkflowRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GenericResponse200 returnValue = _handleCreateStartsmdsloadingworkflowResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createStartsmdsloadingworkflow
     */
    private HttpRequest _buildCreateStartsmdsloadingworkflowRequest(
                final SMDSWorkflowPayload body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/StartSMDSLoadingWorkflow");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createStartsmdsloadingworkflow
     * @return An object of type GenericResponse200
     */
    private GenericResponse200 _handleCreateStartsmdsloadingworkflowResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GenericResponse200 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GenericResponse200>(){});

        return _result;
    }

    /**
     * DescribeSMDSLoadingWorkflow
     * @param    body    Required parameter: { WorkflowJobID* } - ID of the workflow document
     * @return    Returns the DescribeWorkflowResponse response from the API call 
     */
    public DescribeWorkflowResponse createDescribesmdsloadingworkflow(
                final DescribeWorkflowPayload body
    ) throws Throwable {

        HttpRequest _request = _buildCreateDescribesmdsloadingworkflowRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateDescribesmdsloadingworkflowResponse(_context);
    }

    /**
     * DescribeSMDSLoadingWorkflow
     * @param    body    Required parameter: { WorkflowJobID* } - ID of the workflow document
     */
    public void createDescribesmdsloadingworkflowAsync(
                final DescribeWorkflowPayload body,
                final APICallBack<DescribeWorkflowResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateDescribesmdsloadingworkflowRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DescribeWorkflowResponse returnValue = _handleCreateDescribesmdsloadingworkflowResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createDescribesmdsloadingworkflow
     */
    private HttpRequest _buildCreateDescribesmdsloadingworkflowRequest(
                final DescribeWorkflowPayload body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/DescribeSMDSLoadingWorkflow");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createDescribesmdsloadingworkflow
     * @return An object of type DescribeWorkflowResponse
     */
    private DescribeWorkflowResponse _handleCreateDescribesmdsloadingworkflowResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new InlineResponse400Exception("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new InlineResponse400Exception("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        DescribeWorkflowResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DescribeWorkflowResponse>(){});

        return _result;
    }

    /**
     * DescribeSWPSLoadingWorkflow
     * @param    body    Required parameter: { WorkflowJobID* } - ID of the workflow document
     * @return    Returns the DescribeWorkflowResponse response from the API call 
     */
    public DescribeWorkflowResponse createDescribeswpsloadingworkflow(
                final DescribeWorkflowPayload body
    ) throws Throwable {

        HttpRequest _request = _buildCreateDescribeswpsloadingworkflowRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateDescribeswpsloadingworkflowResponse(_context);
    }

    /**
     * DescribeSWPSLoadingWorkflow
     * @param    body    Required parameter: { WorkflowJobID* } - ID of the workflow document
     */
    public void createDescribeswpsloadingworkflowAsync(
                final DescribeWorkflowPayload body,
                final APICallBack<DescribeWorkflowResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateDescribeswpsloadingworkflowRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DescribeWorkflowResponse returnValue = _handleCreateDescribeswpsloadingworkflowResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createDescribeswpsloadingworkflow
     */
    private HttpRequest _buildCreateDescribeswpsloadingworkflowRequest(
                final DescribeWorkflowPayload body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/DescribeSWPSLoadingWorkflow");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createDescribeswpsloadingworkflow
     * @return An object of type DescribeWorkflowResponse
     */
    private DescribeWorkflowResponse _handleCreateDescribeswpsloadingworkflowResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new InlineResponse400Exception("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new InlineResponse400Exception("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        DescribeWorkflowResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DescribeWorkflowResponse>(){});

        return _result;
    }

    /**
     * StartSWPSLoadingWorkflow
     * @param    body    Required parameter: { ResourceTypeID* , Manifest* } - ID of the workflow document
     * @return    Returns the GenericResponse200 response from the API call 
     */
    public GenericResponse200 createStartswpsloadingworkflow(
                final SWPSWorkflowPayload body
    ) throws Throwable {

        HttpRequest _request = _buildCreateStartswpsloadingworkflowRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateStartswpsloadingworkflowResponse(_context);
    }

    /**
     * StartSWPSLoadingWorkflow
     * @param    body    Required parameter: { ResourceTypeID* , Manifest* } - ID of the workflow document
     */
    public void createStartswpsloadingworkflowAsync(
                final SWPSWorkflowPayload body,
                final APICallBack<GenericResponse200> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateStartswpsloadingworkflowRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GenericResponse200 returnValue = _handleCreateStartswpsloadingworkflowResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createStartswpsloadingworkflow
     */
    private HttpRequest _buildCreateStartswpsloadingworkflowRequest(
                final SWPSWorkflowPayload body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/StartSWPSLoadingWorkflow");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createStartswpsloadingworkflow
     * @return An object of type GenericResponse200
     */
    private GenericResponse200 _handleCreateStartswpsloadingworkflowResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GenericResponse200 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GenericResponse200>(){});

        return _result;
    }

}
