/*
 * OsduR1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.example.*;
import com.example.models.*;
import com.example.exceptions.*;
import com.example.http.client.HttpClient;
import com.example.http.client.HttpContext;
import com.example.http.request.HttpRequest;
import com.example.http.response.HttpResponse;
import com.example.http.response.HttpStringResponse;
import com.example.http.client.APICallBack;
import com.example.controllers.syncwrapper.APICallBackCatcher;

public class IngestionClientController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static IngestionClientController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the IngestionClientController class 
     */
    public static IngestionClientController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new IngestionClientController();
                }
            }
        }
        return instance;
    }

    /**
     * loadManifests
     * @param    body    Required parameter: { ManifestFolderPath*, FilesToProcess, PipelineID }
     * @return    Returns the InlineResponse2001 response from the API call 
     */
    public InlineResponse2001 createLoadManifests(
                final Body3 body
    ) throws Throwable {

        HttpRequest _request = _buildCreateLoadManifestsRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateLoadManifestsResponse(_context);
    }

    /**
     * loadManifests
     * @param    body    Required parameter: { ManifestFolderPath*, FilesToProcess, PipelineID }
     */
    public void createLoadManifestsAsync(
                final Body3 body,
                final APICallBack<InlineResponse2001> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateLoadManifestsRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            InlineResponse2001 returnValue = _handleCreateLoadManifestsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createLoadManifests
     */
    private HttpRequest _buildCreateLoadManifestsRequest(
                final Body3 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/loadManifests");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createLoadManifests
     * @return An object of type InlineResponse2001
     */
    private InlineResponse2001 _handleCreateLoadManifestsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 409) {
            throw new GenericResponseErrorException("CONFLICT", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        InlineResponse2001 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<InlineResponse2001>(){});

        return _result;
    }

    /**
     * updateWorkflow
     * @param    body    Required parameter: { id* } ID of the Parent Workflow Document that needs to be marked as Completed
     * @return    Returns the GenericResponse response from the API call 
     */
    public GenericResponse updateWorkflow(
                final Body4 body
    ) throws Throwable {

        HttpRequest _request = _buildUpdateWorkflowRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateWorkflowResponse(_context);
    }

    /**
     * updateWorkflow
     * @param    body    Required parameter: { id* } ID of the Parent Workflow Document that needs to be marked as Completed
     */
    public void updateWorkflowAsync(
                final Body4 body,
                final APICallBack<GenericResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateWorkflowRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GenericResponse returnValue = _handleUpdateWorkflowResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateWorkflow
     */
    private HttpRequest _buildUpdateWorkflowRequest(
                final Body4 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/updateWorkflow");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateWorkflow
     * @return An object of type GenericResponse
     */
    private GenericResponse _handleUpdateWorkflowResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GenericResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GenericResponse>(){});

        return _result;
    }

    /**
     * getStatus
     * @param    body    Required parameter: { WorkflowID* } ID of the Workflow Document
     * @return    Returns the GenericResponse response from the API call 
     */
    public GenericResponse createGetStatus(
                final Body5 body
    ) throws Throwable {

        HttpRequest _request = _buildCreateGetStatusRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateGetStatusResponse(_context);
    }

    /**
     * getStatus
     * @param    body    Required parameter: { WorkflowID* } ID of the Workflow Document
     */
    public void createGetStatusAsync(
                final Body5 body,
                final APICallBack<GenericResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateGetStatusRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GenericResponse returnValue = _handleCreateGetStatusResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createGetStatus
     */
    private HttpRequest _buildCreateGetStatusRequest(
                final Body5 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/getStatus");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createGetStatus
     * @return An object of type GenericResponse
     */
    private GenericResponse _handleCreateGetStatusResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GenericResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GenericResponse>(){});

        return _result;
    }

    /**
     * getiIngestionWorkflows
     * @param    body    Optional parameter: { ParentWorkflowID, UserEmail }
     * @return    Returns the List<ParentWorkflow> response from the API call 
     */
    public List<ParentWorkflow> createGetiIngestionWorkflows(
                final Body6 body
    ) throws Throwable {

        HttpRequest _request = _buildCreateGetiIngestionWorkflowsRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateGetiIngestionWorkflowsResponse(_context);
    }

    /**
     * getiIngestionWorkflows
     * @param    body    Optional parameter: { ParentWorkflowID, UserEmail }
     */
    public void createGetiIngestionWorkflowsAsync(
                final Body6 body,
                final APICallBack<List<ParentWorkflow>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateGetiIngestionWorkflowsRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<ParentWorkflow> returnValue = _handleCreateGetiIngestionWorkflowsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createGetiIngestionWorkflows
     */
    private HttpRequest _buildCreateGetiIngestionWorkflowsRequest(
                final Body6 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/getiIngestionWorkflows");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createGetiIngestionWorkflows
     * @return An object of type List<ParentWorkflow>
     */
    private List<ParentWorkflow> _handleCreateGetiIngestionWorkflowsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<ParentWorkflow> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<ParentWorkflow>>(){});

        return _result;
    }

    /**
     * reset
     * @return    Returns the GenericResetResponse response from the API call 
     */
    public GenericResetResponse createReset(
    ) throws Throwable {

        HttpRequest _request = _buildCreateResetRequest();
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateResetResponse(_context);
    }

    /**
     * reset
     */
    public void createResetAsync(
                final APICallBack<GenericResetResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateResetRequest();
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GenericResetResponse returnValue = _handleCreateResetResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createReset
     */
    private HttpRequest _buildCreateResetRequest() throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/reset");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createReset
     * @return An object of type GenericResetResponse
     */
    private GenericResetResponse _handleCreateResetResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GenericResetResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GenericResetResponse>(){});

        return _result;
    }

    /**
     * validateWorkflow
     * @param    body    Required parameter: { ParentWorkflowID* } ID of the Parent Workflow Document
     * @return    Returns the GenericResponse response from the API call 
     */
    public GenericResponse createValidateWorkflow(
                final Body7 body
    ) throws Throwable {

        HttpRequest _request = _buildCreateValidateWorkflowRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateValidateWorkflowResponse(_context);
    }

    /**
     * validateWorkflow
     * @param    body    Required parameter: { ParentWorkflowID* } ID of the Parent Workflow Document
     */
    public void createValidateWorkflowAsync(
                final Body7 body,
                final APICallBack<GenericResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateValidateWorkflowRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GenericResponse returnValue = _handleCreateValidateWorkflowResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createValidateWorkflow
     */
    private HttpRequest _buildCreateValidateWorkflowRequest(
                final Body7 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/validateWorkflow");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createValidateWorkflow
     * @return An object of type GenericResponse
     */
    private GenericResponse _handleCreateValidateWorkflowResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new GenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new GenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GenericResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GenericResponse>(){});

        return _result;
    }

    /**
     * createIngestionPipeline
     * @param    body    Required parameter: { pipelineName* , description* , createdBy* , manifestFolderPath* }
     * @return    Returns the PipelineGenericResponse response from the API call 
     */
    public PipelineGenericResponse createIngestionPipeline(
                final PipelineCreate body
    ) throws Throwable {

        HttpRequest _request = _buildCreateIngestionPipelineRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateIngestionPipelineResponse(_context);
    }

    /**
     * createIngestionPipeline
     * @param    body    Required parameter: { pipelineName* , description* , createdBy* , manifestFolderPath* }
     */
    public void createIngestionPipelineAsync(
                final PipelineCreate body,
                final APICallBack<PipelineGenericResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateIngestionPipelineRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            PipelineGenericResponse returnValue = _handleCreateIngestionPipelineResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createIngestionPipeline
     */
    private HttpRequest _buildCreateIngestionPipelineRequest(
                final PipelineCreate body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/createIngestionPipeline");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createIngestionPipeline
     * @return An object of type PipelineGenericResponse
     */
    private PipelineGenericResponse _handleCreateIngestionPipelineResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new PipelineGenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new PipelineGenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        PipelineGenericResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PipelineGenericResponse>(){});

        return _result;
    }

    /**
     * updateIngestionPipeline
     * @param    body    Required parameter: { id* , pipelineName* , description* , createdBy* , manifestFolderPath* }
     * @return    Returns the PipelineGenericResponse response from the API call 
     */
    public PipelineGenericResponse updateIngestionPipeline(
                final PipelineUpdate body
    ) throws Throwable {

        HttpRequest _request = _buildUpdateIngestionPipelineRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateIngestionPipelineResponse(_context);
    }

    /**
     * updateIngestionPipeline
     * @param    body    Required parameter: { id* , pipelineName* , description* , createdBy* , manifestFolderPath* }
     */
    public void updateIngestionPipelineAsync(
                final PipelineUpdate body,
                final APICallBack<PipelineGenericResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateIngestionPipelineRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            PipelineGenericResponse returnValue = _handleUpdateIngestionPipelineResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateIngestionPipeline
     */
    private HttpRequest _buildUpdateIngestionPipelineRequest(
                final PipelineUpdate body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/updateIngestionPipeline");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateIngestionPipeline
     * @return An object of type PipelineGenericResponse
     */
    private PipelineGenericResponse _handleUpdateIngestionPipelineResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new PipelineGenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new PipelineGenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        PipelineGenericResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PipelineGenericResponse>(){});

        return _result;
    }

    /**
     * Fetches all the available pipelines in the Cosmos DB collection
     * @param    body    Optional parameter: { id } - ID of the pipeline document
     * @return    Returns the List<Pipeline> response from the API call 
     */
    public List<Pipeline> createViewIngestionPipeline(
                final Body7 body
    ) throws Throwable {

        HttpRequest _request = _buildCreateViewIngestionPipelineRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateViewIngestionPipelineResponse(_context);
    }

    /**
     * Fetches all the available pipelines in the Cosmos DB collection
     * @param    body    Optional parameter: { id } - ID of the pipeline document
     */
    public void createViewIngestionPipelineAsync(
                final Body7 body,
                final APICallBack<List<Pipeline>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateViewIngestionPipelineRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<Pipeline> returnValue = _handleCreateViewIngestionPipelineResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createViewIngestionPipeline
     */
    private HttpRequest _buildCreateViewIngestionPipelineRequest(
                final Body7 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/viewIngestionPipeline");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createViewIngestionPipeline
     * @return An object of type List<Pipeline>
     */
    private List<Pipeline> _handleCreateViewIngestionPipelineResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new PipelineGenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new PipelineGenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<Pipeline> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Pipeline>>(){});

        return _result;
    }

    /**
     * Delete Ingestion Pipeline
     * @param    body    Required parameter: { id* } - ID of the pipeline document
     * @return    Returns the PipelineGenericResponse response from the API call 
     */
    public PipelineGenericResponse createDeleteIngestionPipeline(
                final Body4 body
    ) throws Throwable {

        HttpRequest _request = _buildCreateDeleteIngestionPipelineRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateDeleteIngestionPipelineResponse(_context);
    }

    /**
     * Delete Ingestion Pipeline
     * @param    body    Required parameter: { id* } - ID of the pipeline document
     */
    public void createDeleteIngestionPipelineAsync(
                final Body4 body,
                final APICallBack<PipelineGenericResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateDeleteIngestionPipelineRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            PipelineGenericResponse returnValue = _handleCreateDeleteIngestionPipelineResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createDeleteIngestionPipeline
     */
    private HttpRequest _buildCreateDeleteIngestionPipelineRequest(
                final Body4 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/deleteIngestionPipeline");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createDeleteIngestionPipeline
     * @return An object of type PipelineGenericResponse
     */
    private PipelineGenericResponse _handleCreateDeleteIngestionPipelineResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new PipelineGenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new PipelineGenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        PipelineGenericResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PipelineGenericResponse>(){});

        return _result;
    }

    /**
     * Get the status of Parentworkflow document(s) associated with the given pipeline ID
     * @param    body    Optional parameter: { pipelineId } - ID of the pipeline document
     * @return    Returns the List<ParentWorkflow> response from the API call 
     */
    public List<ParentWorkflow> createGetPipelineWorkflowStatus(
                final Body10 body
    ) throws Throwable {

        HttpRequest _request = _buildCreateGetPipelineWorkflowStatusRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateGetPipelineWorkflowStatusResponse(_context);
    }

    /**
     * Get the status of Parentworkflow document(s) associated with the given pipeline ID
     * @param    body    Optional parameter: { pipelineId } - ID of the pipeline document
     */
    public void createGetPipelineWorkflowStatusAsync(
                final Body10 body,
                final APICallBack<List<ParentWorkflow>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateGetPipelineWorkflowStatusRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<ParentWorkflow> returnValue = _handleCreateGetPipelineWorkflowStatusResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createGetPipelineWorkflowStatus
     */
    private HttpRequest _buildCreateGetPipelineWorkflowStatusRequest(
                final Body10 body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/getPipelineWorkflowStatus");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createGetPipelineWorkflowStatus
     * @return An object of type List<ParentWorkflow>
     */
    private List<ParentWorkflow> _handleCreateGetPipelineWorkflowStatusResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new PipelineGenericResponseErrorException("BAD_REQUEST", _context);
        }
        if (_responseCode == 500) {
            throw new PipelineGenericResponseErrorException("INTERNAL_SERVER_ERROR", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<ParentWorkflow> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<ParentWorkflow>>(){});

        return _result;
    }

}
